import type { NextPage, GetStaticProps, GetStaticPaths } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import { PageLayout } from "~/components/Layout";
import Image from "next/image";
import LoadingSpinner from "~/components/Loading";
import PostView from "~/components/PostView";
import { generateSSGHelper } from "~/server/utils/ssgHelper";

const ProfileFeed = (props: { userId: string }) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({
    userId: props.userId,
  });

  if (isLoading)
    return (
      <div className="flex h-full items-center justify-center">
        <LoadingSpinner />
      </div>
    );

  if (!data || data.length === 0) return <div>User has not posted</div>;

  return (
    <div className="flex flex-col px-4">
      {data.map((post) => (
        <PostView {...post} key={post.post.id} />
      ))}
    </div>
  );
};

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    username: username,
  });

  if (!data) return <div>Something went wrong</div>;
  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative h-48 border-b border-slate-600 bg-gradient-to-l from-[rgb(32,38,57)] from-[11%] to-[rgb(63,76,119)] to-[70%]">
          <div className="absolute bottom-0 left-0 -mb-24 ml-8 flex flex-col items-center">
            <Image
              src={data.profileImageUrl}
              alt={`${data.username ?? ""}'s profile picture`}
              width={128}
              height={128}
              className="mb-2 rounded-full border-4 border-black"
            />
            <div className="text-xl font-semibold">
              <p>{`@${data.username ?? ""}`}</p>
            </div>
          </div>
          <div className="h-80"></div>
          <div className="w-full border-b border-slate-600"></div>

          <ProfileFeed userId={data.id} />
        </div>
      </PageLayout>
    </>
  );
};

export default ProfilePage;

export const getStaticProps: GetStaticProps = async (ctx) => {
  const helpers = generateSSGHelper();

  const slug = ctx.params?.slug;

  if (typeof slug !== "string") throw new Error("slug not found");
  const username = slug.replace("@", "");

  await helpers.profile.getUserByUsername.prefetch({ username: username });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};
